# 68. Text Justification | Java Solution

[![LeetCode Problem](https://img.shields.io/badge/LeetCode-68.%20Text%20Justification-blue)](https://leetcode.com/problems/text-justification/)
[![Java](https://img.shields.io/badge/Language-Java-orange)](https://www.java.com/)
[![Difficulty](https://img.shields.io/badge/Difficulty-Hard-red)]()

---

## ðŸ§© Problem Statement

You are given an array of strings `words` and an integer `maxWidth`. Your task is to format the text so that:
- Each line has **exactly** `maxWidth` characters.
- Each line is **fully justified** (both left and right).
- The text is packed using a **greedy** strategy: fill each line with as many words as possible.
- Spaces are distributed **evenly** between words.
- If spaces can't be evenly distributed, **leftmost slots** get more space.
- The **last line** should be **left-justified** and words are separated by a single space. No extra spaces between words on the last line.

---

## ðŸ§  Examples

### Example 1

| Input | Output |
|-------|--------|
| `words = ["This", "is", "an", "example", "of", "text", "justification."]`<br>`maxWidth = 16` | `[ "This Â  Â is Â  Â an", "example Â of text", "justification. Â " ]` |

### Example 2

| Input | Output |
|-------|--------|
| `words = ["What","must","be","acknowledgment","shall","be"]`<br>`maxWidth = 16` | `[ "What Â  must Â  be", "acknowledgment Â ", "shall be Â  Â  Â  Â " ]` |

### Example 3

| Input | Output |
|-------|--------|
| `words = ["Science","is","what","we","understand","well","enough","to","explain","to","a","computer.","Art","is","everything","else","we","do"]`<br>`maxWidth = 20` | `[ "Science Â is Â what we", "understand Â  Â  Â well", "enough to explain to", "a Â computer. Â Art is", "everything Â else Â we", "do Â  Â  Â  Â  Â  Â  Â  Â  Â " ]` |

---

## âœ… Constraints

- `1 <= words.length <= 300`
- `1 <= words[i].length <= 20`
- `1 <= maxWidth <= 100`
- `words[i].length <= maxWidth`

---

## ðŸ’¡ Approach

### ðŸ”¸ Greedy Line Building + Custom Spacing

1. **Group words** into lines such that their combined length + minimum required spaces â‰¤ `maxWidth`.
2. For **each line except the last**:
   - Calculate total number of spaces.
   - Divide them between words, starting from the left.
3. For the **last line** or lines with a single word:
   - Use **left-justification**.
   - Pad remaining characters with spaces at the end.

---

## ðŸ”„ Complexity Analysis

|                | Value |
|----------------|-------|
| **Time**       | `O(n)` â€” where `n` is the total number of characters in `words` |
| **Space**      | `O(1)` â€” apart from the output list |

---

## ðŸ“š Topics & Hint

**Topics:** String â€¢ Greedy

**Hint:**  
> Try to greedily fit as many words as possible into each line. Then pad the extra space by distributing it from left to right.

---
